/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginEditor.h"
#include "FloatParameter.h"
#include "AHREnvelopeGenerator.h"

#include "PluginProcessor.h"

//==============================================================================
AlkamistSidechainCompressorAudioProcessor::AlkamistSidechainCompressorAudioProcessor()
{
    addParameter (holdLevel  = new FloatParameter (this, 1.0f, -60.0f, 0.0f, "Hold Level"));
    addParameter (attackTime  = new FloatParameter (this, 0.0f, 0.1f, 200.0f, "Attack Time"));
    addParameter (holdTime  = new FloatParameter (this, 0.0f, 0.1f, 200.0f, "Hold Time")); 
    addParameter (releaseTime  = new FloatParameter (this, 0.0f, 0.1f, 200.0f, "Release Time"));

    mAHREnvelopeGenerator = new AHREnvelopeGenerator();
    mAHREnvelopeGenerator->setSampleRate(getSampleRate());
    mAHREnvelopeGenerator->setHoldLevel (holdLevel->getUnNormalizedValue());
    mAHREnvelopeGenerator->setAttackTime (attackTime->getUnNormalizedValue());
    mAHREnvelopeGenerator->setHoldTime (holdTime->getUnNormalizedValue());
    mAHREnvelopeGenerator->setReleaseTime (releaseTime->getUnNormalizedValue());
}

AlkamistSidechainCompressorAudioProcessor::~AlkamistSidechainCompressorAudioProcessor()
{
}

//==============================================================================
const String AlkamistSidechainCompressorAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String AlkamistSidechainCompressorAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool AlkamistSidechainCompressorAudioProcessor::isInputChannelStereoPair (int /*index*/) const
{
    return true;
}

bool AlkamistSidechainCompressorAudioProcessor::isOutputChannelStereoPair (int /*index*/) const
{
    return true;
}

bool AlkamistSidechainCompressorAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool AlkamistSidechainCompressorAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool AlkamistSidechainCompressorAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double AlkamistSidechainCompressorAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

//==============================================================================
void AlkamistSidechainCompressorAudioProcessor::prepareToPlay (double sampleRate, int /*samplesPerBlock*/)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..

    mAHREnvelopeGenerator->setSampleRate(sampleRate);
}

void AlkamistSidechainCompressorAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void AlkamistSidechainCompressorAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    MidiBuffer::Iterator MIDIMessagesIterator (midiMessages);
    MidiMessage currentMidiMessage;
    int midiMessageSamplePosition;

    float* leftChannel = buffer.getWritePointer (0);
    float* rightChannel = buffer.getWritePointer (1);

    for (int sample = 0; sample < buffer.getNumSamples(); ++sample)
    {
        MIDIMessagesIterator.setNextSamplePosition (sample);

        // Is there at least one more MIDI message in the buffer?
        if (MIDIMessagesIterator.getNextEvent (currentMidiMessage, midiMessageSamplePosition))
        {
            // Is the message we got a note on and is it in the
            // right place?
            if (currentMidiMessage.isNoteOn() 
                && midiMessageSamplePosition == sample)
            {
                mAHREnvelopeGenerator->restartEnvelope();
                mAHREnvelopeGenerator->setVelocityScaleFactor (currentMidiMessage.getVelocity());
            }
        }
 
        mAHREnvelopeGenerator->processEnvelope();

        float temporaryGain = mAHREnvelopeGenerator->getOutput();

        leftChannel[sample] = temporaryGain;
        rightChannel[sample] = temporaryGain;
    }
}

//==============================================================================
AudioProcessorEditor* AlkamistSidechainCompressorAudioProcessor::createEditor()
{
    return new AlkamistSidechainCompressorAudioProcessorEditor (*this);
}

//==============================================================================
void AlkamistSidechainCompressorAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void AlkamistSidechainCompressorAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
void AlkamistSidechainCompressorAudioProcessor::parameterChange (FloatParameter* parameterThatWasChanged)
{
    if (parameterThatWasChanged == holdLevel)
    {
        mAHREnvelopeGenerator->setHoldLevel (holdLevel->getUnNormalizedValue());
    }
    if (parameterThatWasChanged == attackTime)
    {
        mAHREnvelopeGenerator->setAttackTime (attackTime->getUnNormalizedValue());
    }
    if (parameterThatWasChanged == holdTime)
    {
        mAHREnvelopeGenerator->setHoldTime (holdTime->getUnNormalizedValue());
    }
    if (parameterThatWasChanged == releaseTime)
    {
        mAHREnvelopeGenerator->setReleaseTime (releaseTime->getUnNormalizedValue());
    }
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new AlkamistSidechainCompressorAudioProcessor();
}





